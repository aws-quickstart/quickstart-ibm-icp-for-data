#
# NOTES:
#  Each ICP node has an ICPRole tag that is used by the bootstrapping
#  scripts to determine the role of the node.  The following values
#  for the ICPRole tag and accepted (case insensitive):
#    Master, Worker, Proxy, Management, VA, etcd
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Boot node for orchestrating the deployment of an IBM Cloud Private cluster. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1p8m99oui)

Parameters:
  # Variables are declared in alphabetical order.
  AMIImageId:
    Description: >-
      The AMI virutal machine image identifier.  Root template defines the mapping by region.
    Type: String

  AdminPassword:
    Description: >-
      IBM Cloud Private administrator (super user) password. Used in the bootstrap script.
    Type: String

  AdminUser:
    Description: >-
      IBM Cloud Private administrator (super user) name. Used in the bootstrap script.
    Type: String

  ApplicationStorageMountPoint:
    Description: >-
      Mount point for the EFS volume to be used for application shared storage.  The Kubernetes EFS provisioner uses this mount point. Used by the bootstrap script.
    Type: String

  BootNodeInstanceType:
    Description: ICP boot node AWS EC2 instance type passed in from parent stack.
    Type: String

  BootNodeProfile:
    Description: >-
      The resource ID of the BootNodeProfile passed in from the root template.
    Type: String

  BootNodeRole:
    Description: >-
      The resource ID of the BootNodeRole imported from the root template.
    Type: String

  ClusterCIDR:
    Description: >-
      The CIDR for the ICP cluster overlay network.  This gets assigned to the network_cidr attribute in config.yaml.  The value provided must be a network that does not conflict with the AWS VPC network.  It also must not conflict with the ICP service overlay network.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ClusterDNSName:
    Description: >-
      The fully qualified domain name (FQDN) to be used for the cluster name. The ClusterDNSName must be the same value as the CN used in the cluster PKI key/certificate.
    Type: String

  ClusterDomain:
    Description: >-
      The network domain of the ICP cluster overlay network.
    Type: String

  ClusterName:
    Description: >-
      The name of the cluster.
    Type: String

  ClusterPKIBucketName:
    Description: >-
      The S3 bucket where the cluster PKI artifacts are located. If not provided, self-signed PKI artifacts will be created and used.
    Type: String

  ClusterPKIRootPath:
    Description: >-
      The path in the cluster PKI S3 bucket where the user defined PKI key and certificate files are found.  This is the key and certificate that used for the master node identity.  The CN of the key and certificate must be the same value that is provided in the ClusterDNSName.  The extensions on the root path are assumed to be .key and .crt to get the key and certificate files respectively. DO NOT provide a leading / on the path value. If not provided, self-signed PKI artifacts will be created and used.
    Type: String

  CustomArtifactsPath:
    Description: >-
      Path to a zip archive in the ICP script bucket (ICPScriptBucketName) for an archive of additional artifacts, typically scripts, for ICP cluster administration extracted on the boot node in the root home directory.
    Type: String

  EBSVolumeType:
    Description: >-
      The type of EBS volume to use for the cluster member EC2 instances. The io1 volume type supports the specification of the disk IOPS.  The gp2 volume type is less expensive and may perform well enough for your purposes. The StorageIOPS parameter specifies the IOPS of an io2 storage device.
    Type: String

  EFSDNSName:
    Description: >-
      The EFS server public DNS name providing shared storage used for application shared storage.  The boot node configures a volume and mounts it at the ApplicationStorageMountPoint. Used by the boostrap script that runs once the CloudFormaton templates have been deployed.
    Type: String

  EFSFileSystemId:
    Description: >-
      EFS file system ID to be used to configure the Kubernetes EFS provisioner. Used by the bootstrap script once the CloudFormation templates have deployed.
    Type: String

  ExcludedMgmtServices:
    Description: >-
      String with the form of a comma delimited list of management services to be excluded from the IBM Cloud Private deployment.  Services that may be excluded are: service-catalog, metering, monitoring, istio, vulnerability-advisor, custom-metrics-adapter
    Type: String

  ExternalSSHSecurityGroup:
    Description: >-
      The ExternalSSHSecurityGroup resource ID from the parent template.
    Type: String

  IBMCloudPrivateVPC:
    Description: >-
      The VPC resource ID for the IBMCloudPrivateVPC deployed by the root template. Used in the bootstrap script.
    Type: String

  ICPArchiveBucketName:
    Description: >-
      The name of the S3 bucket where the ICP install archive and Docker install binary is located.  The bucket name is needed to establish permission to access the ICP and Docker installation archives. Root template uses a mapping based on AWS region to provide the archive bucket name.
    Type: String

  ICPBootNodeScriptPackagePath:
    Description: >-
      The path in the ICP bootstrap S3 bucket to the ICP Boot node script package (zip) file.
    Type: String

  ICPDeploymentLogsBucketName:
    Description: >-
      The name of the S3 bucket where ICP stack deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.
    Type: String

  ICPS3KeyPrefix:
    Description: >-
      The S3 key prefix (context root) for IBM Cloud Private installation artifacts in the ICPScriptBucketName S3 bucket. By convention the value includes a trailing slash. (The ICPScriptBucketName gets assigned the value of the QSS3BucketName.)
    Type: String

  ICPScriptBucketName:
    Description: >-
      The name of the S3 bucket where the ICP boostrap script packages are located. (The ICPScriptBucketName gets assigned the value of the QSS3BucketName.)
    Type: String

  ICPVersion:
    Description: >-
      The version of ICP to be deployed. Provided by the parent stack.  Used in the bootstrap script to determine what ICP and Docker to install.
    Type: String

  InceptionTimeout:
    Description: >-
      The number of seconds to wait for the IBM Cloud Private inception container to complete the installation.  Provided by the parent stack.  Used in the bootstrap script.
    Type: Number

  InstallationCompletedURL:
    Description: >-
      The pre-assigned URL to use for signalling the ICPInstallationCompleted wait condition in the parent stack.  The UserData code sends a success/failure signal to the wait condition when the inception install and all the other configuration of ICP has completed.
    Type: String

  KeyFilePath:
    Description: >-
      Path to a file in the ICP script bucket (ICPScriptBuckeName) with public keys for administrators who need SSH access to the boot node.
    Type: String

  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  LicenseAgreement:
    Description: >-
      I have read and agree to the license terms for IBM Cloud Private for Data (http://ibm.biz/BdY3AY).
    Type: String
    Default: '-'
    AllowedValues:
      - 'I agree'
      - '-'
      
  MasterNodeCount:
    Description: >-
      Number of master nodes to be deployed in the ICP cluster. Must be an odd number. For a development deployment 1 is sufficient; for production deployments, 3. The MasterNodeCount is referenced in the bootstrap script.
    Type: Number
    AllowedValues:
      - 1
      - 3

  NATGatewayPublicIPs:
    Description: >-
      Comma separated list of public IPs associated with the NAT gateways defined for the private subnets. The NAT gateway IPs are added to the MasterICPSecurityGroup ingress rules for the various ports. Particularly for an HA deployment, the NAT gateway IPs must be permitted to access the master nodes via the Master node ElasticLoadBalancers.  The cluster nodes on the private subnets access Master node services via the Master node ELBs. That cluster node network traffic takes on the public IP address of the NAT gateways in order to flow to the master node ELBs.
    Type: CommaDelimitedList

  ProxyELBHostedZoneID:
    Description: >-
      The Proxy ELB HostedZone resource ID is used by the bootstrap script to create alias record entries for the Proxy ELB DNS name.
    Type: String

  ProxyNodeLoadBalancerName:
    Description: >-
      The DNS name of the ICP Proxy node Elastic Load Balancer.
    Type: String

  PublicSubnetIds:
    Description: >-
      A comma delimted list of public subnet resource IDs passed in from the parent stack.
    Type: String

  ResourceOwner:
    Description: >-
      Value for the owner tag for the deployed resource associated with the stack.
    Type: String

  RootStackName:
    Description: >-
      The name of the root stack.
    Type: String

  SecurityStackId:
    Description: >-
      The stack ID of the "security" stack where the security resources are defined.  The bootstrap script modifies security groups once the IP addresses are known for the boot node in order to ensure only limited access to the IBM Cloud Private cluster nodes.
    Type: String

  ServiceCIDR:
    Description: >-
      The CIDR for the ICP service overlay network.  This gets assigned to the service_cluster_ip_range attribute in config.yaml.  The value provided must be a network that does not conflict with the AWS VPC network.  It also must not conflict with the ICP cluster overlay network.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  StackIds:
    Description: List of resource IDs for the all of the nested stacks
    Type: CommaDelimitedList

  StorageIOPS:
    Description: >-
      The maximum number of read and write operations per second for the EBS storage devices provisioned to the IBM Cloud Private cluster member EC2 instances. The io1 storage volume type supports an explicit setting of the IOPS of the device. The EBSVolumeType parameter specifies the storage volume type. This parameter is ignored if the EBSVolumeType is set to gp2.
    Type: Number

  VPCDomain:
    Description: >-
      The network domain of the VPC.  The VPCDomain is used when defining the hosted zone.
    Type: String

  WhichClusterLBAddress:
    Description: >-
      The value to use for the cluster load balancer address.  This value is used to drive the logic in the bootstrap script.
    Type: String
    AllowedValues:
      - UseMasterELBAddress
      - UseMasterELBName
      - UseClusterName

  WhichProxyLBAddress:
    Description: >-
      The value to use for the proxy load balancer address.  This value is used to drive the logic in the bootstrap script.
    Type: String
    AllowedValues:
      - UseProxyELBAddress
      - UseProxyELBName
      - UsePrimaryAppDomain


Conditions:
  GPStorage: !Equals [!Ref EBSVolumeType, gp2]


Resources:

  ICPBootNode:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref BootNodeRole
          buckets:
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          # Configsets are executed by cfn-init synchronously.
          # The ICP installation 10 GB tar ball gets downloaded from S3
          # in ~3 minutes. Awesome!
          # bootstrap.sh does not execute until the config sets complete.
          Required:
            - InstallPackages
            - StackPropertiesFile
            - ICPBootstrapScripts
          Custom:
            - CustomArtifacts
          KeyFile:
            - KeyFile

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
              ansible: []
              nfs-common: []
              socat: []
              inetutils-traceroute: []
              python-yaml: []
            python:
              pycryptodome: []
              boto3: []
              requests: []
              ipaddr: []

        ICPBootstrapScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, ScriptPackagePath: !Ref ICPBootNodeScriptPackagePath }

        CustomArtifacts:
          sources:
            /root: !Sub
              - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${ArtifactsPath}
              - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, ArtifactsPath: !Ref CustomArtifactsPath }

        KeyFile:
          files:
            /root/ssh_publickeys:
              source: !Sub
                - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${KeyFilePath}
                - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, KeyFilePath: !Ref KeyFilePath }
              mode: '000554'
              owner: root
              group: root

        StackPropertiesFile:
          # The boot node needs both root stackId to get
          # the output that holds all the other stack Ids
          # It needs its own stackId to pick up its input
          # parameters.
          files:
            /root/mystack.props:
              content: !Sub |
                REGION=${AWS::Region}
                STACK_NAME=${RootStackName}
                STACK_ID="${AWS::StackId}"
                ROLE=boot

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: !Ref EBSVolumeType
            DeleteOnTermination: true
            VolumeSize: 300
            Iops: !If [GPStorage, !Ref "AWS::NoValue", !Ref StorageIOPS]

      IamInstanceProfile: !Ref BootNodeProfile
      InstanceType: !Ref BootNodeInstanceType
      ImageId: !Ref AMIImageId
      KeyName: !Ref KeyName

      # Need to use a NetworInterfaces property in order to indicate
      # that the network interface should be associated with the public
      # IP address.  As far as I can tell the only way to do that is
      # with the NetworkInterfaces property.
      NetworkInterfaces:
        - Description: Primary boot node network interface
          GroupSet:
            - !Ref ExternalSSHSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Select [0, !Split [',', !Ref PublicSubnetIds]]

      Tags:
        - Key: Name
          Value: ICPBootNode
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: ICPRole
          Value: Boot
        - Key: !Sub kubernetes.io/cluster/${RootStackName}
          Value: ${RootStackName}

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Steps to get to the latest ansible
            apt install -y software-properties-common
            apt-add-repository -y ppa:ansible/ansible
            apt update -y
            apt install -y ansible
            # Install pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ICPBootNode --configsets Required --region ${AWS::Region}
            # Conditionally load the custom archive
            if [ "${CustomArtifactsPath}" != "" ]; then
              /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ICPBootNode --configsets Custom --region ${AWS::Region}
            fi
            # Conditionally load file with additional public keys for ssh access to the boot node
            if [ "${KeyFilePath}" != "" ]; then
              /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ICPBootNode --configsets KeyFile --region ${AWS::Region}
            fi
            # Use pip here rather than using python packages
            # Python packages seems very limited in what it can install.
            pip install pyopenssl
            pip install docker
            pip install paramiko
            pip install scp
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/bootstrap.sh --os ubuntu


Outputs:
  PrivateIPv4Address:
    Description: >-
      The private IPv4 address of the boot node.
    Value: !GetAtt ICPBootNode.PrivateIp

  PublicIPv4Address:
    Description: >-
      The private IPv4 address of the boot node.
    Value: !GetAtt ICPBootNode.PublicIp
