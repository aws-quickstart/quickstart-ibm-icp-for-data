#
# NOTES:
#  Each ICP node has an ICPRole tag that is used by the bootstrapping
#  scripts to determine the role of the node.  The following values
#  for the ICPRole tag and accepted (case insensitive):
#    Master, Worker, Proxy, Management, VA, etcd
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Master node EC2 instances. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  # Variables are declared in alphabetical order.
  AvailabilityZoneCount:
    Description: >-
      The number of Availability Zones.
    Type: Number

  EFSDNSName:
    Description: >-
      The EFS server public DNS name providing shared storage used by the master nodes for the various mount points they need to share, i.e., docker registry, kubernetes audit log, ICP audit log.  Used by the master node initialization script when there is more than 1 master node.
    Type: String

  ExternalSSHSecurityGroup:
    Description: >-
      ExternalSSHSecurityGroup resource ID from the parent stack
    Type: String

  IBMCloudPrivateVPC:
    Description: >-
      The VPC resource ID for the IBMCloudPrivateVPC deployed by the root template.
    Type: String

  ICPClusterNodeScriptPackagePath:
    Description: >-
      The path in the ICP bootstrap S3 bucket to the ICP cluster node script package (zip) file.  Cluster nodes are master, proxy, worker, management, vulnerability advisor.
    Type: String

  ICPDeploymentLogsBucketName:
    Description: >-
      The name of the S3 bucket where ICP stack deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.
    Type: String

  ICPMasterSecurityGroup:
    Description: >-
      ICPMasterSecurityGroup resource ID from the parent stack
    Type: String

  ICPS3KeyPrefix:
    Description: >-
      The S3 key prefix (context root) for IBM Cloud Private installation artifacts in the ICPScriptBucketName S3 bucket. By convention the value includes a trailing slash. (The ICPScriptBucketName gets assigned the value of the QSS3BucketName.)
    Type: String

  ICPScriptBucketName:
    Description: >-
      The name of the S3 bucket where the ICP boostrap script packages are located.
    Type: String

  ICPVersion:
    Description: >-
      The version of ICP to be deployed. Provided by the parent stack.  Used in the nodeinit script to determine what Docker binary to install.
    Type: String

  InternalICPSecurityGroup:
    Description: >-
      InternalICPSecurityGroup resource ID from the parent stack
    Type: String

  InternalSSHSecurityGroup:
    Description: >-
      InternalSSHSecurityGroup resource ID from the parent stack
    Type: String

  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  MasterNodeCount:
    Description: >-
      Number of master nodes to be deployed in the ICP cluster. Must be an odd number. For a development deployment 1 is sufficient. For production deployments typically 3 or 5.
    Type: String

  MasterNodeInstanceType:
    Description: ICP master node AWS EC2 instance type
    Type: String
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  MasterNodeProfile:
    Description: >-
      ICPMasterNodeProfile resource ID from the parent stack
    Type: String

  MasterNodeRole:
    Description: >-
      The IAM role with the permissions to access the various resources of the
      IBM Cloud Private deployment.
    Type: String

  PrivateSubnetIds:
    Description: >-
      A comma delimted list of private subnet resource IDs passed in from the parent stack. The PrivateSubnetIds are used to configure the master node auto-scaling group.
    Type: String

  PublicSubnetIds:
    Description: >-
      A comma delimted list of public subnet resource IDs passed in from the parent stack.  PublicSubnetIds are used to configure the Master Node Elastic Load Balancer (ELB).
    Type: String

  ResourceOwner:
    Description: >-
      Value for the owner tag for the deployed resource associated with the stack.
    Type: String

  RootStackName:
    Description: >-
      The root stack name. The root stack name is used as the common unique name for the Kubernetes tag on all EC2 instances in the cluster.
    Type: String

Mappings:
  # See https://cloud-images.ubuntu.com/locator/ec2/
  # Builds needed that support HVM, Elastic Network Adapter (ENA)
  # in order to use the MD5 instance types.
  # Use EBS backed storage as opposed "instance-store", e.g., hvm:ebs-ssd
  # TODO - Update EU an AP
  AWSRegionAMIEC2:
    us-east-1:
      Ubuntu16: ami-ef151d90
    us-east-2:
      Ubuntu16: ami-dad5efbf
    us-west-1:
      Ubuntu16: ami-d8b05cbb
    us-west-2:
      Ubuntu16: ami-1cc69e64
    eu-west-1:
      Ubuntu16: ami-844e0bf7
    eu-central-1:
      Ubuntu16: ami-a9a557c6
    ap-northeast-1:
      Ubuntu16: ami-032f516e93380b8e6
    ap-northeast-2:
      Ubuntu16: ami-0eee4dcc71fced4cf
    ap-southeast-1:
      Ubuntu16: ami-d554f1b6
    ap-southeast-2:
      Ubuntu16: ami-0bc1f168

Conditions:
  3AZCondition: !Equals [!Ref AvailabilityZoneCount, 3]
  3MastersCondition: !Equals [!Ref MasterNodeCount, 3]

Resources:

  MasterNodeLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: network
      Subnets: !Split [',', !Ref PublicSubnetIds]
      Tags:
          # Name tag is needed by the scripting to get config parameter
          # value for the cluster_lb_address
        - Key: Name
          Value: MasterNodeLoadBalancer
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: !Sub kubernetes.io/cluster/${RootStackName}
          Value: !Ref RootStackName


  MasterNode8443TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8443
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC

  MasterNode8001TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8001
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC

  MasterNode9443TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9443
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC

  MasterNode8500TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8500
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC

  MasterNode8600TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8600
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC

  MasterNode31843TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 31843
      Protocol: TCP
      Targets: !If
        - 3MastersCondition
        - - Id: !Ref MasterNodeOne
          - Id: !Ref MasterNodeTwo
          - Id: !Ref MasterNodeThree
        - - Id: !Ref MasterNodeOne
      VpcId: !Ref IBMCloudPrivateVPC  

  MasterNodeLoadBalancer8443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode8443TargetGroup
      Port: 8443
      Protocol: TCP

  MasterNodeLoadBalancer8001Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode8001TargetGroup
      Port: 8001
      Protocol: TCP

  MasterNodeLoadBalancer9443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode9443TargetGroup
      Port: 9443
      Protocol: TCP

  MasterNodeLoadBalancer8500Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode8500TargetGroup
      Port: 8500
      Protocol: TCP

  MasterNodeLoadBalancer8600Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode8600TargetGroup
      Port: 8600
      Protocol: TCP

  MasterNodeLoadBalancer31843Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MasterNodeLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MasterNode31843TargetGroup
      Port: 31843
      Protocol: TCP    

  MasterNodeOne:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref MasterNodeRole
          buckets:
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
              nfs-common: []
              socat: []
              inetutils-traceroute: []
              python-yaml: []
            python:
              pycryptodome: []
              boto3: []
              requests: []

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                REGION=${AWS::Region}
                STACK_NAME=${RootStackName}
                STACK_ID="${AWS::StackId}"
                ROLE=master

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            DeleteOnTermination: true
            VolumeSize: 300
            Iops: 8000

      IamInstanceProfile: !Ref MasterNodeProfile
      InstanceType: !Ref MasterNodeInstanceType
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16
      KeyName: !Ref KeyName

      SubnetId: !Select [0, !Split [',', !Ref PrivateSubnetIds]]
      # Next two lines are to debug nodeint.py issues that may
      # occur prior to configuring ssh from boot to cluster nodes.
      #SubnetId: !Select [0, !Split [',', !Ref PublicSubnetIds]]
      #AssociatePublicIpAddress: true

      SecurityGroupIds:
        # External access to the master node public ports
        - !Ref ICPMasterSecurityGroup
        # Internal ICP network connections
        - !Ref InternalICPSecurityGroup
        # Boot node access via SSH
        - !Ref InternalSSHSecurityGroup
        # External access via SSH (only needed for debug)
        #- !Ref ExternalSSHSecurityGroup

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: ICPRole
          Value: Master
        - Key: !Sub kubernetes.io/cluster/${RootStackName}
          Value: !Ref RootStackName

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the ICPBootstrap files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterNodeOne --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            pip install docker
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu


  MasterNodeTwo:
    Condition: 3MastersCondition
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref MasterNodeRole
          buckets:
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
              nfs-common: []
              socat: []
              inetutils-traceroute: []
              python-yaml: []
            python:
              pycryptodome: []
              boto3: []
              requests: []

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                REGION=${AWS::Region}
                STACK_NAME=${RootStackName}
                STACK_ID="${AWS::StackId}"
                ROLE=master

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            DeleteOnTermination: true
            VolumeSize: 300
            Iops: 8000

      IamInstanceProfile: !Ref MasterNodeProfile
      InstanceType: !Ref MasterNodeInstanceType
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16
      KeyName: !Ref KeyName

      SecurityGroupIds:
        # External access to the master node public ports
        - !Ref ICPMasterSecurityGroup
        # Internal ICP network connections
        - !Ref InternalICPSecurityGroup
        # Boot node access via SSH
        - !Ref InternalSSHSecurityGroup

      SubnetId: !If
        - 3AZCondition
        - !Select [1, !Split [',', !Ref PrivateSubnetIds]]
        - !Select [0, !Split [',', !Ref PrivateSubnetIds]]

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: ICPRole
          Value: Master
        - Key: !Sub kubernetes.io/cluster/${RootStackName}
          Value: !Ref RootStackName

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the ICPBootstrap files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterNodeTwo --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            pip install docker
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu


  MasterNodeThree:
    Condition: 3MastersCondition
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref MasterNodeRole
          buckets:
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
              nfs-common: []
              socat: []
              inetutils-traceroute: []
              python-yaml: []
            python:
              pycryptodome: []
              boto3: []
              requests: []

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3.amazonaws.com/${KeyPrefix}${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, KeyPrefix: !Ref ICPS3KeyPrefix, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                REGION=${AWS::Region}
                STACK_NAME=${RootStackName}
                STACK_ID="${AWS::StackId}"
                ROLE=master

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            DeleteOnTermination: true
            VolumeSize: 300
            Iops: 8000

      IamInstanceProfile: !Ref MasterNodeProfile
      InstanceType: !Ref MasterNodeInstanceType
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16
      KeyName: !Ref KeyName

      SecurityGroupIds:
        # External access to the master node public ports
        - !Ref ICPMasterSecurityGroup
        # Internal ICP network connections
        - !Ref InternalICPSecurityGroup
        # Boot node access via SSH
        - !Ref InternalSSHSecurityGroup

      SubnetId: !If
        - 3AZCondition
        - !Select [2, !Split [',', !Ref PrivateSubnetIds]]
        - !Select [0, !Split [',', !Ref PrivateSubnetIds]]

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: ICPRole
          Value: Master
        - Key: !Sub kubernetes.io/cluster/${RootStackName}
          Value: !Ref RootStackName

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the ICPBootstrap files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterNodeThree --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            pip install docker
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu


Outputs:
  StackId:
    Description: >-
      The Master node stack resource ID.  Needed for introspection of the master  node stack to pull out the EC2 instance information.
    Value: !Ref AWS::StackId

  MasterNodeLoadBalancerDNSName:
    Description: >-
      The master node Elastic Load Balancer (ELB) DNS name (used in Route53 record set).
    Value: !GetAtt MasterNodeLoadBalancer.DNSName

  MasterNodeLoadBalancerHostedZoneID:
    Description: >-
      The master node Elastic Load Balancer (ELB) hosted zone ID (used in Route53 record set).
    Value: !GetAtt MasterNodeLoadBalancer.CanonicalHostedZoneID
