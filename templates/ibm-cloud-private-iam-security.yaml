
---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  IAM resources used by the root template and all other stack templates used to deploy the IBM Cloud Private cluster.

Parameters:

  ClusterPKIBucketName:
    Description: >-
      The S3 bucket where the cluster PKI artifacts are located. If not provided, self-signed PKI artifacts will be created and used.
    Type: String

  ExternalApplicationLocation:
    Description: >-
      The IP address range that can be used to get to ICP Proxy ELB for access to deployed workloads on the ICP worker nodes from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalICPAdminLocation:
    Description: >-
      The network CIDR for IP addresses that can be used to SSH to the boot node. In single user test situations this can be a /32 CIDR.  Additional values can be added post-deployment from the AWS CloudFormation console.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalSSHLocation:
    Description: >-
      The ExternalSSHLocation resource ID from the parent template.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  IBMCloudPrivateVPC:
    Description: >-
      The IBMCloudPrivateVPC resource ID from the parent template.
    Type: String

  ICPArchiveBucketName:
    Description: >-
      The name of the S3 bucket where the ICP install archive and Docker install binary is located.  The bucket name is needed to establish permission to access the ICP and Docker installation archives. Root template uses a mapping based on AWS region to provide the archive bucket name.
    Type: String

  ICPDeploymentLogsBucketName:
    Description: >-
      The name of the S3 bucket where ICP stack deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.
    Type: String

  ICPScriptBucketName:
    Description: >-
      The name of the S3 bucket where the ICP boostrap script packages are located.
    Type: String

  PrivateSubnetCIDR:
    Description: >-
      The PrivateSubnetCIDR resource reference used in defining security groups.
    Type: String

  PublicSubnetCIDR:
    Description: >-
      The PublicSubnetCIDR resource reference used in defining the internal SSH security group that allows boot node on the public subnet to access the cluster nodes on the private subnet(s).
    Type: String

  ResourceOwner:
    Description: >-
      Value for the owner tag for the deployed resources associated with the stack.
    Type: String

Resources:

  # For the list of AWS permissions needed for k8s master nodes:
  # See: https://github.com/kubernetes/cloud-provider-aws/
  MasterNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        # The first several policies support things the ICP nodes need to be able
        # to do during node initialization, i.e., the nodeinit script
        - PolicyName: BucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            # ListBucket is useful to avoid 403 errors that are really 404 errors
            Statement:
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}/*
                Effect: Allow

        - PolicyName: CloudFormationAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudformation:ListStackResources
                  - cloudformation:DescribeStacks
                Resource: '*'
                Effect: Allow

        - PolicyName: EC2MessagesAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2messages:GetMessages
                Effect: Allow
                Resource: '*'

          # Needed for the bootstrap script and nodeinit script interaction
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameters
                  # The following is needed for instance health check
                  - ssm:UpdateInstanceInformation
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                Effect: Allow
                Resource: '*'

        # The remaining policies are k8s master node related policies
        - PolicyName: AutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:DescribeLaunchConfigurations
                - autoscaling:DescribeTags
                Resource: '*'
                Effect: Allow

        - PolicyName: EC2AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateRoute
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DeleteRoute
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteVolume
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcs
                  - ec2:DetachVolume
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyVolume
                  - ec2:RevokeSecurityGroupIngress
                Effect: Allow
                Resource: '*'

        - PolicyName: ElastLoadBalancingAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerPolicy
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DeleteListener
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:DeleteLoadBalancerListeners
                  - elasticloadbalancing:DeleteTargetGroup
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DetachLoadBalancerFromSubnets
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:ModifyTargetGroup
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                Effect: Allow
                Resource: '*'

        - PolicyName: IAMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:CreateServiceLinkedRole
                Effect: Allow
                Resource: '*'

        - PolicyName: KMSAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - kms:DescribeKey
                Effect: Allow
                Resource: '*'

  ICPNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            # ListBucket is useful to avoid 403 errors that are really 404 errors
            Statement:
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}/*
                Effect: Allow

          # cluster nodes need this to introspect stack
        - PolicyName: CloudFormationAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudformation:ListStackResources
                  - cloudformation:DescribeStacks
                Resource: '*'
                Effect: Allow

        - PolicyName: EC2MessagesAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2messages:GetMessages
                Effect: Allow
                Resource: '*'

          # Needed for the bootstrap script and nodeinit script interaction
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameters
                  # The following is needed for instance health check
                  # TBD: Not sure these are needed
                  - ssm:UpdateInstanceInformation
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                Effect: Allow
                Resource: '*'

        # The rest of the policies are from k8s node policies
        - PolicyName: EC2AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                Effect: Allow
                Resource: '*'

        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:ListImages
                Effect: Allow
                Resource: '*'


  BootNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            # ListBucket is useful to avoid 403 errors that are really 404 errors
            Statement:
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPArchiveBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ICPScriptBucketName}/*
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ICPDeploymentLogsBucketName}/*
                Effect: Allow
                # ClusterPKIBucketName is the bucket holding PKI key and cert
                # for CA signed PKI artifacts to use in the deployment.
              - Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ClusterPKIBucketName}
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ClusterPKIBucketName}/*
                Effect: Allow

          # From here on, the policies are needed for the bootstrap scripts
          # to access various classes of resources to prepare for and configure
          # the ICP installation.
        - PolicyName: CloudFormationAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudformation:ListStackResources
                  - cloudformation:DescribeStacks
                Resource: '*'
                Effect: Allow

          # Needed for the bootstrap script introspection of the stack
        - PolicyName: AutoScalingAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - autoscaling:DescribeAutoScalingGroups
                Resource: '*'
                Effect: Allow

          # Needed for the bootstrap script introspection of the stacks
          # Also for modifying security groups post deployment, once IP addresses are known.
        - PolicyName: EC2StackAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:DescribeStacks
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  # ModifyInstanceAttribute needed to disable source_dest_check
                  # NOTE: Disabling source_dest_check does not seem to be necessary.
                  # - ec2:ModifyInstanceAttribute,
                Effect: Allow
                Resource: '*'

          # Needed for modifying security groups post deployment,
          # once IP addresses are known.  (See SecurityHelper in the bootstrap script.)
          # For some doc, see:
          # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_ec2_securitygroups-vpc.html
        - PolicyName: EC2SecurityGroupAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                Effect: Allow
                # May want to narrow this down to specific security group(s)
                Resource: '*'
              - Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSecurityGroupReferences
                Effect: Allow
                Resource: '*'

        - PolicyName: EC2MessagesAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ec2messages:GetMessages
                Effect: Allow
                Resource: '*'

        - PolicyName: ElastLoadBalancingAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                # These next 2 are needed for introspecting the stacks in bootstrap script
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DescribeLoadBalancers
                Effect: Allow
                Resource: '*'

          # Needed for the bootstrap script and nodeinit script interaction
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameters
                  # The following is needed for instance health check
                  - ssm:UpdateInstanceInformation
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                Effect: Allow
                Resource: '*'

          # boot script adds alias records to Route53 DNS
        - PolicyName: Route53AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource: '*'


  # WARNING: For as yet unknown reasons, the profile and role must be treated as a pair when configuring a LaunchConfiguration. The deployment fails when you do something like define the MasterNodeProfile and use the NodeRole with it.  Need to investigate further. Hence each profile has a corresponding role.

  # WARNING: An InstanceProfile can have only 1 Role
  BootNodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BootNodeRole

  # WARNING: An InstanceProfile can have only 1 Role
  MasterNodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MasterNodeRole

  # WARNING: An InstanceProfile can have only 1 Role
  ICPNodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ICPNodeRole

  # TODO: Need to confirm that this is the proper approach.
  # Basing this on the Feng, Chen, Kwong article
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling access from any IP address to the ICP Proxy ingress controller for access to all applications deployed in the cluster.
      SecurityGroupIngress:
        - Description: Application ingress controller (HTTPS)
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ExternalApplicationLocation
        - Description: Application ingress controller (HTTP)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ExternalApplicationLocation
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  # NOTE: Additional ingress rules are added by the SecurityHelper
  # in the bootstrap script after deployment once the boot node IP
  # addresses are known.  The boot node needs access to these ports
  # on the master node(s).
  ICPMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling access to the ICP Master node ports from any IP address.
      SecurityGroupIngress:
        - Description: Kubernetes API server
          IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Management console (HTTP)
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Management console (HTTPS)
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Image manager 8500
          IpProtocol: tcp
          FromPort: 8500
          ToPort: 8500
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Image manager 8600
          IpProtocol: tcp
          FromPort: 8600
          ToPort: 8600
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Metering server on Master node(s)
          IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          CidrIp: !Ref ExternalICPAdminLocation
        - Description: Management console (HTTPS)
          IpProtocol: tcp
          FromPort: 31843
          ToPort: 31843
          CidrIp: !Ref ExternalICPAdminLocation  
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner


  ExternalSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling external SSH access to the boot node.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ExternalSSHLocation
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  InternalSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling internal SSH access from the boot node to the cluster member nodes
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicSubnetCIDR
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  InternalICPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling network traffic among the ICP components deployed in the cluster, e.g., Calico, etcd, Kubernetes API server, MongoDB, etc.
      SecurityGroupIngress:
        - Description: All ports
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PrivateSubnetCIDR

      SecurityGroupEgress:
        - Description: All ports to anywhere
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  # Had issues for HA deployment
  Test1InternalICPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling network traffic among the ICP components deployed in the cluster, e.g., Calico, etcd, Kubernetes API server, MongoDB, etc.
      SecurityGroupIngress:
        - Description: All TCP ports
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: All UDP ports
          IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PrivateSubnetCIDR

          # icmp: -1 in FromPort (all types) and -1 in ToPort (all codes)
        - Description: ICMP
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Protocol 4
          IpProtocol: 4
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PrivateSubnetCIDR

      SecurityGroupEgress:
        - Description: All ports to anywhere
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

  # TODO: Review for ports, protocols used in ICP 3.1.0
  # For AWS doc, see: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AuthorizeSecurityGroupIngress.html
  # Missing: some ports such as LDAP prots (389, 686)
  # TODO: This FineGrainedInternalSecurityGroup is on the shelf
  # until we get other more basic things working.
  FineGrainedInternalICPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling network traffic among the ICP components deployed in the cluster, e.g., Calico, etcd, Kubernetes API server, MongoDB, etc.
      SecurityGroupIngress:
          # icmp: -1 in FromPort (all types) and -1 in ToPort (all codes)
        - Description: ICMP
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PrivateSubnetCIDR

          # New with ICP 3.1.0 (TBD: What is this?)
          # NOTE: (PVS) I'm pretty sure the IpProtocol value needs to be a string.
        - Description: Protocol 4
          IpProtocol: "4"
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Alert manager
          IpProtocol: tcp
          FromPort: 9093
          ToPort: 9093
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Calico 179
          IpProtocol: tcp
          FromPort: 179
          ToPort: 179
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Calico 9099
          IpProtocol: tcp
          FromPort: 9099
          ToPort: 9099
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: collectd exporter
          IpProtocol: tcp
          FromPort: 9103
          ToPort: 9103
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Elasticsearch 9200
          IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Elasticsearch 9300
          IpProtocol: tcp
          FromPort: 9300
          ToPort: 9300
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Elasticsearch exporter
          IpProtocol: tcp
          FromPort: 9108
          ToPort: 9108
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: etcd 2380
          IpProtocol: tcp
          FromPort: 2380
          ToPort: 2380
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: etcd 4001
          IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Grafana
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Heapster (8082)
          IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Heapster (8084)
          IpProtocol: tcp
          FromPort: 8084
          ToPort: 8084
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Helm
          IpProtocol: tcp
          FromPort: 31030
          ToPort: 31031
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Image manager 8500
          IpProtocol: tcp
          FromPort: 8500
          ToPort: 8500
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Image manager 8600
          IpProtocol: tcp
          FromPort: 8600
          ToPort: 8600
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Ingress service (HTTP)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Ingress service (HTTPS)
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Istio 31380
          IpProtocol: tcp
          FromPort: 31380
          ToPort: 31380
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Istio 31390
          IpProtocol: tcp
          FromPort: 31390
          ToPort: 31390
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Kibana
          IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Kubernetes API server
          IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Kubernetes 10248 - 10252
          IpProtocol: tcp
          FromPort: 10248
          ToPort: 10252
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Kubernetes 30000 - 32767 (UDP)
          IpProtocol: udp
          FromPort: 30000
          ToPort: 32767
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Kubernetes 30000 - 32767 (TCP)
          IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Logstash
          IpProtocol: tcp
          FromPort: 5044
          ToPort: 5044
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Management console (HTTP)
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Management console (HTTPS)
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Mariadb
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Mariadb Galera 4567-4568
          IpProtocol: tcp
          FromPort: 4567
          ToPort: 4568
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Mariadb Galera 4444
          IpProtocol: tcp
          FromPort: 4444
          ToPort: 4444
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Metering server
          IpProtocol: tcp
          FromPort: 31443
          ToPort: 31443
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Metering server on Master or Management node(s)
          IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Mongo DB on the Master node(s)
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Node exporter
          IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: platform-api
          IpProtocol: tcp
          FromPort: 6969
          ToPort: 6969
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: platform-auth-service
          IpProtocol: tcp
          FromPort: 3100
          ToPort: 3100
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: platform-deploy
          IpProtocol: tcp
          FromPort: 4242
          ToPort: 4242
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Prometheus
          IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Rescheduler
          IpProtocol: tcp
          FromPort: 9235
          ToPort: 9235
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Rook-Ceph 8124
          IpProtocol: tcp
          FromPort: 8124
          ToPort: 8124
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: Rook-Ceph 6789-7300
          IpProtocol: tcp
          FromPort: 6789
          ToPort: 7300
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: service-catalog-api-server
          IpProtocol: tcp
          FromPort: 30443
          ToPort: 30443
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: strongSwan IPsec 500 (UDP)
          IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: strongSwan IPsec 500 (TCP)
          IpProtocol: tcp
          FromPort: 500
          ToPort: 500
          CidrIp: !Ref PrivateSubnetCIDR

        - Description: strongSwan IPsec 4500
          IpProtocol: tcp
          FromPort: 4500
          ToPort: 4500
          CidrIp: !Ref PrivateSubnetCIDR

      SecurityGroupEgress:
        - Description: All ports to anywhere
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"

      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner

# PVS: Experimented with Export, but for the ICP deployment
# using Outputs is easier and more appropriate given the topology.
# Outputs in alphabetical order
Outputs:
  ApplicationSecurityGroup:
    Description: >-
      ApplicationSecurityGroup resource ID for use by parent stack template.
    Value: !Ref ApplicationSecurityGroup

  ICPMasterSecurityGroup:
    Description: >-
      ICPMasterSecurityGroup resource ID for use by parent stack template.
    Value: !Ref ICPMasterSecurityGroup

  ExternalSSHSecurityGroup:
    Description: >-
      ExternalSSHSecurityGroup resource ID for use by the parent stack template.
    Value: !Ref ExternalSSHSecurityGroup

  BootNodeProfile:
    Description: >-
      BootNodeProfile resource ID for use by parent stack template(s)
    Value: !Ref BootNodeProfile

  BootNodeRole:
    Description: >-
      BootNodeRole resource ID for use by parent stack templates(s)
    Value: !Ref BootNodeRole

  MasterNodeProfile:
    Description: >-
      MasterNodeProfile resource ID for use by parent stack template(s)
    Value: !Ref MasterNodeProfile

  MasterNodeRole:
    Description: >-
      MasterNodeRole resource ID for use by parent stack templates(s)
    Value: !Ref MasterNodeRole

  ICPNodeProfile:
    Description: >-
      ICPNodeProfile resource ID for use by parent stack template(s)
    Value: !Ref ICPNodeProfile

  ICPNodeRole:
    Description: >-
      ICPNodeRole resource ID for use by parent stack templates(s)
    Value: !Ref ICPNodeRole

  InternalICPSecurityGroup:
    Description: >-
      InternalICPSecurityGroup resource ID for use by the parent stack template.
    Value: !Ref InternalICPSecurityGroup

  InternalSSHSecurityGroup:
    Description: >-
      InternalSSHSecurityGroup resource ID for use by the parent stack template.
    Value: !Ref InternalSSHSecurityGroup

  StackId:
    Description: The IAM Resources stack ID.
    Value: !Ref AWS::StackId
